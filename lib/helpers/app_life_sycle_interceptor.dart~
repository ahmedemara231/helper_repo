import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

class AppLifecycleManager extends StatefulWidget {
  final Widget child;
  final Function(AppLifecycleState)? onStateChanged;
  final VoidCallback? onResumed;
  final VoidCallback? onPaused;
  final VoidCallback? onInactive;
  final VoidCallback? onDetached;
  final VoidCallback? onHidden;

  const AppLifecycleManager({
    Key? key,
    required this.child,
    this.onStateChanged,
    this.onResumed,
    this.onPaused,
    this.onInactive,
    this.onDetached,
    this.onHidden,
  }) : super(key: key);

  @override
  State<AppLifecycleManager> createState() => _AppLifecycleManagerState();
}

class _AppLifecycleManagerState extends State<AppLifecycleManager>
    with WidgetsBindingObserver {
  AppLifecycleState? _lastLifecycleState;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _lastLifecycleState = WidgetsBinding.instance.lifecycleState;
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);

    // Call the general state change callback
    widget.onStateChanged?.call(state);

    // Handle specific state changes
    switch (state) {
      case AppLifecycleState.resumed:
        _handleAppResumed();
        break;
      case AppLifecycleState.paused:
        _handleAppPaused();
        break;
      case AppLifecycleState.inactive:
        _handleAppInactive();
        break;
      case AppLifecycleState.detached:
        _handleAppDetached();
        break;
      case AppLifecycleState.hidden:
        _handleAppHidden();
        break;
    }

    _lastLifecycleState = state;

    // Log state change for debugging
    debugPrint('App lifecycle state changed: ${state.name}');
  }

  void _handleAppResumed() {
    debugPrint('App is in FOREGROUND (resumed)');
    widget.onResumed?.call();
    // Add your foreground logic here
    // Example: Resume timers, refresh data, etc.
  }

  void _handleAppPaused() {
    debugPrint('App is in BACKGROUND (paused)');
    widget.onPaused?.call();
    // Add your background logic here
    // Example: Pause timers, save state, etc.
  }

  void _handleAppInactive() {
    debugPrint('App is INACTIVE');
    widget.onInactive?.call();
    // App is inactive (e.g., during phone call, system dialog)
  }

  void _handleAppDetached() {
    debugPrint('App is DETACHED (about to be terminated)');
    widget.onDetached?.call();
    // App is about to be terminated
    // Save critical data here
  }

  void _handleAppHidden() {
    debugPrint('App is HIDDEN');
    widget.onHidden?.call();
    // App is hidden (iOS specific)
  }

  @override
  Widget build(BuildContext context) {
    return widget.child;
  }
}

// Service class for handling app lifecycle globally
class AppLifecycleService {
  static final AppLifecycleService _instance = AppLifecycleService._internal();
  factory AppLifecycleService() => _instance;
  AppLifecycleService._internal();

  final List<Function(AppLifecycleState)> _listeners = [];
  AppLifecycleState? _currentState;

  void addListener(Function(AppLifecycleState) listener) {
    _listeners.add(listener);
  }

  void removeListener(Function(AppLifecycleState) listener) {
    _listeners.remove(listener);
  }

  void _notifyListeners(AppLifecycleState state) {
    _currentState = state;
    for (var listener in _listeners) {
      listener(state);
    }
  }

  AppLifecycleState? get currentState => _currentState;

  bool get isInForeground => _currentState == AppLifecycleState.resumed;
  bool get isInBackground => _currentState == AppLifecycleState.paused;
  bool get isInactive => _currentState == AppLifecycleState.inactive;
  bool get isDetached => _currentState == AppLifecycleState.detached;
  bool get isHidden => _currentState == AppLifecycleState.hidden;
}

// Example usage in main.dart
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'App Lifecycle Demo',
      home: AppLifecycleManager(
        onStateChanged: (state) {
          // Handle all state changes
          print('Global state change: ${state.name}');
        },
        onResumed: () {
          // App came to foreground
          print('App resumed - perform foreground tasks');
        },
        onPaused: () {
          // App went to background
          print('App paused - perform background tasks');
        },
        onDetached: () {
          // App is about to be terminated
          print('App detached - save critical data');
        },
        child: MyHomePage(),
      ),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _currentState = 'Unknown';
  final AppLifecycleService _lifecycleService = AppLifecycleService();

  @override
  void initState() {
    super.initState();

    // Add listener to the service
    _lifecycleService.addListener(_onAppStateChange);
  }

  void _onAppStateChange(AppLifecycleState state) {
    setState(() {
      _currentState = state.name;
    });

    // Perform specific actions based on state
    switch (state) {
      case AppLifecycleState.resumed:
        _onAppResumed();
        break;
      case AppLifecycleState.paused:
        _onAppPaused();
        break;
      case AppLifecycleState.detached:
        _onAppTerminated();
        break;
      default:
        break;
    }
  }

  void _onAppResumed() {
    // App is in foreground
    print('Performing foreground operations...');
    // Refresh data, resume animations, etc.
  }

  void _onAppPaused() {
    // App is in background
    print('Performing background operations...');
    // Save data, pause timers, etc.
  }

  void _onAppTerminated() {
    // App is being terminated
    print('App terminating - saving critical data...');
    // Save critical application state
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('App Lifecycle Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              'Current App State:',
              style: TextStyle(fontSize: 18),
            ),
            SizedBox(height: 10),
            Text(
              _currentState,
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: _getStateColor(_currentState),
              ),
            ),
            SizedBox(height: 30),
            _buildStateInfo(),
          ],
        ),
      ),
    );
  }

  Widget _buildStateInfo() {
    return Container(
      padding: EdgeInsets.all(16),
      margin: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.grey[100],
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text('State Meanings:', style: TextStyle(fontWeight: FontWeight.bold)),
          SizedBox(height: 8),
          Text('• resumed: App is visible and responding to user input (FOREGROUND)'),
          Text('• paused: App is not visible to user (BACKGROUND)'),
          Text('• inactive: App is inactive (system dialog, phone call)'),
          Text('• detached: App is about to be TERMINATED'),
          Text('• hidden: App is hidden (iOS specific)'),
        ],
      ),
    );
  }

  Color _getStateColor(String state) {
    switch (state.toLowerCase()) {
      case 'resumed':
        return Colors.green;
      case 'paused':
        return Colors.orange;
      case 'inactive':
        return Colors.yellow[700]!;
      case 'detached':
        return Colors.red;
      case 'hidden':
        return Colors.purple;
      default:
        return Colors.grey;
    }
  }

  @override
  void dispose() {
    _lifecycleService.removeListener(_onAppStateChange);
    super.dispose();
  }
}